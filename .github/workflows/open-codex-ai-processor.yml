# name: Open-Codex AI Issue Processor

# on:
#   issues:
#     types: [labeled]
#     labels: ["help-ai"]

# permissions:
#   contents: write
#   issues: read
#   pull-requests: write

# jobs:
#   process_issue_with_open_codex:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Setup Node.js
#         uses: actions/setup-node@v4.4.0
#         with:
#           node-version: '22.x'

#       - name: Checkout repository
#         uses: actions/checkout@v4.2.2

#       - name: Get issue details
#         id: get_issue
#         uses: actions/github-script@v7.0.1
#         with:
#           script: |
#             const issue = await github.rest.issues.get({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               issue_number: context.payload.issue.number,
#             });
#             core.setOutput("title", issue.data.title);
#             core.setOutput("body", issue.data.body);
#             core.setOutput("number", issue.data.number);

#       - name: Install open-codex globally
#         run: npm install -g open-codex@latest

#       - name: Process issue with open-codex
#         env:
#           ISSUE_TITLE: ${{ steps.get_issue.outputs.title }}
#           ISSUE_BODY: ${{ steps.get_issue.outputs.body }}
#           GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}
#         run: |
#           open-codex -a full-auto --quiet "issueの内容を参考に実装してください\n\n### $ISSUE_TITLE\n\n$ISSUE_BODY" --provider gemini --model gemini-2.0-flash
#           # diffがなかったらエラー終了
#           if [ $? -ne 0 ]; then
#             echo "::error::No changes detected by open-codex. Exiting."
#             exit 1
#           fi

      # - name: Generate commit and PR messages (Japanese)
      #   env:
      #     ISSUE_TITLE: ${{ steps.get_issue.outputs.title }}
      #     ISSUE_BODY: ${{ steps.get_issue.outputs.body }}
      #     OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      #   run: |
      #     # コミットメッセージ生成 (日本語)
      #     commit_msg=$(curl -s https://openrouter.ai/api/v1/chat/completions \
      #       -H "Authorization: Bearer $OPENROUTER_API_KEY" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "model": "deepseek/deepseek-chat-v3-0324:free",
      #         "messages": [
      #           {
      #             "role": "system",
      #             "content": "diffから簡潔なgitコミットメッセージを日本語で生成してください。技術的な内容を含め、適切なプレフィックス(feat, fixなど)を使用してください。"
      #           },
      #           {
      #             "role": "user",
      #             "content": "diff: $(git diff --cached)"
      #           }
      #         ]
      #       }' | jq -r '.choices[0].message.content')

      #     # PRタイトルと本文生成 (日本語)
      #     pr_title=$(curl -s https://openrouter.ai/api/v1/chat/completions \
      #       -H "Authorization: Bearer $OPENROUTER_API_KEY" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "model": "deepseek/deepseek-chat-v3-0324:free",
      #         "messages": [
      #           {
      #             "role": "system",
      #             "content": "diffからGitHub issueに対応するコード変更のためのPRタイトルを日本語で生成してください。"
      #           },
      #           {
      #             "role": "user",
      #             "content": "Diff: $(git diff --cached)\n\nIssue: $ISSUE_TITLE\n\n$ISSUE_BODY"
      #           }
      #         ]
      #       }' | jq -r '.choices[0].message.content')

      #     pr_body=$(curl -s https://openrouter.ai/api/v1/chat/completions \
      #       -H "Authorization: Bearer $OPENROUTER_API_KEY" \
      #       -H "Content-Type: application/json" \
      #       -d '{
      #         "model": "deepseek/deepseek-chat-v3-0324:free",
      #         "messages": [
      #           {
      #             "role": "system",
      #             "content": "diffからGitHub issueに対応するコード変更のためのPR本文を日本語で生成してください。技術的な詳細を含め、変更内容が明確に分かるようにしてください。"
      #           },
      #           {
      #             "role": "user",
      #             "content": "Diff: $(git diff --cached)\n\nIssue: $ISSUE_TITLE\n\n$ISSUE_BODY"
      #           }
      #         ]
      #       }' | jq -r '.choices[0].message.content')

      #     echo "commit_msg=$commit_msg" > "GITHUB_OUTPUT"
      #     echo "pr_title=$pr_title" >> "GITHUB_OUTPUT"
      #     echo "pr_body=$pr_body" >> "GITHUB_OUTPUT"
      #     echo "commit_msg=$commit_msg, pr_title=$pr_title, pr_body=$pr_body"

      # - name: Create PR
      #   env:
      #     ISSUE_NUMBER: ${{ steps.get_issue.outputs.number }}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     git config --global user.name "GitHub Actions"
      #     git config --global user.email "actions@github.com"

      #     branch_name="ai-help-$ISSUE_NUMBER"
      #     git checkout -b $branch_name

      #     git add .
      #     git commit -m "Automated commit for issue #$ISSUE_NUMBER"
      #     git push origin $branch_name
      #     gh pr create \
      #       --title "Automated PR for issue #$ISSUE_NUMBER" \
      #       --body "- $ISSUE_NUMBER\n\nThis PR is automatically generated." \
      #       --base main \
      #       --head $branch_name