name: AI Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install bandit safety
          
      - name: Scan with Bandit
        run: |
          bandit -r . -f json -o bandit-results.json || true
          
      - name: Check dependencies with Safety
        run: |
          safety check -r requirements.txt --json > safety-results.json || true
          
      - name: AI Security Analysis
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let securityReport = '## AIセキュリティ分析レポート 🛡️\n\n';
            
            try {
              if (fs.existsSync('./bandit-results.json')) {
                const banditResults = JSON.parse(fs.readFileSync('./bandit-results.json', 'utf8'));
                securityReport += '### Bandit スキャン結果\n\n';
                
                if (banditResults.results && banditResults.results.length > 0) {
                  securityReport += '以下のセキュリティ問題が検出されました：\n\n';
                  banditResults.results.forEach(issue => {
                    securityReport += `- **${issue.issue_text}** (${issue.issue_severity}) in \`${issue.filename}\` at line ${issue.line_number}\n`;
                  });
                } else {
                  securityReport += '✅ Banditによるスキャンでセキュリティ問題は検出されませんでした。\n\n';
                }
              }
              
              if (fs.existsSync('./safety-results.json')) {
                const safetyResults = JSON.parse(fs.readFileSync('./safety-results.json', 'utf8'));
                securityReport += '### Safety 依存関係チェック結果\n\n';
                
                if (safetyResults.vulnerabilities && safetyResults.vulnerabilities.length > 0) {
                  securityReport += '以下の脆弱性のある依存関係が検出されました：\n\n';
                  safetyResults.vulnerabilities.forEach(vuln => {
                    securityReport += `- **${vuln.package_name}** ${vuln.installed_version}: ${vuln.vulnerability}\n`;
                  });
                } else {
                  securityReport += '✅ 脆弱性のある依存関係は検出されませんでした。\n\n';
                }
              }
              
              securityReport += '\n\nこのレポートはAIによって生成されました。詳細な分析が必要な場合は、セキュリティ専門家に相談してください。';
              
              // Create a comment with AI analysis
              const context = github.context;
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.payload.pull_request.number,
                  body: securityReport
                });
              }
            } catch (error) {
              console.log('Security analysis failed:', error);
            }