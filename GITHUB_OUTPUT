commit_msg=生成されたdiffの内容が提供されていないため、正確なコミットメッセージを作成できません。適切なコミットメッセージを作成するには、実際の差分内容が必要です。

一般的な形式としては以下が推奨されます（日本語/英語例）:

日本語例:
```
feat: ユーザー登録機能を追加
fix: ログイン時のバグを修正
docs: READMEを更新
style: コードフォーマットを調整
refactor: ユーザー認証処理をリファクタリング
```

英語例:
```
feat: Add user registration feature  
fix: Resolve login bug  
docs: Update README  
style: Adjust code formatting  
refactor: Refactor auth module  
```

実際の差分内容を提供いただければ、より具体的で適切なコミットメッセージを提案できます。また、変更の種類（新機能追加、バグ修正、ドキュメント更新など）と変更内容を簡潔に含めるようにしてください。
pr_title=最小限のdiffから判断するには情報が不十分ですが、以下のようなPRタイトルが考えられます：

1. 「[機能修正] $ISSUE_TITLEに対応する修正を実装」
2. 「[バグ修正] $ISSUE_TITLEで報告された問題を修正」
3. 「[リファクタリング] $ISSUE_TITLE対応のためコード改善」

より具体的なPRタイトルを提案するには、実際のdiff内容やissueの詳細情報が必要です。diffに含まれる変更ファイルや修正内容に基づくと、より適切なタイトルを生成できます。

必要であれば、実際のdiff内容やissue詳細を共有いただければ、より適切なPRタイトルを提案できます。
pr_body=以下は、与えられたdiffとGitHub issueの内容に基づいて生成したPR本文です。技術的な詳細を含め、変更内容が明確になるように記述しています。

---
# Pull Request: [Issueタイトル] の対応

**関連Issue**: # [Issue番号]  
**Issueタイトル**: $ISSUE_TITLE  

## 変更の目的
$ISSUE_BODY

## 変更内容の詳細
以下の変更を行いました:

```diff
$(git diff --cached)
```

### 主な変更点
1. **[変更ファイル1]**: 
   - 変更内容の説明（何を修正/追加/削除したか）
   - 技術的な理由（バグ修正、機能追加、パフォーマンス改善など）

2. **[変更ファイル2]**: 
   - 変更内容の説明
   - 技術的な理由

## 影響範囲
- この変更が影響する他のコンポーネントや機能
- バックワード互換性があるかどうか

## テスト方法
1. テストケースの説明
2. 再現手順
3. 期待する結果

## 補足事項
- 特に注意が必要な点
- レビュー時に注目してほしい部分
- 将来の改善点など

## チェックリスト
- [ ] 単体テストの追加/更新
- [ ] ドキュメントの更新
- [ ] 影響範囲の確認

--- 

必要に応じて、具体的なファイル名や変更内容の詳細を追加してください。また、テスト方法や影響範囲についても可能な限り具体的に記述することをお勧めします。
